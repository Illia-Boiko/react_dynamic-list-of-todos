{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoItems/TodoItems.tsx","api/index.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["FilterByStatus","TodoItems","props","visibleTodos","map","todo","className","classNames","TodoList__item","completed","type","readOnly","checked","title","button","selectedUser","userId","onClick","onChangeUser","id","TodoList","state","todos","filterBy","All","titleFilter","filterOptions","Active","Completed","loadTodos","setState","getFilterTodos","filter","toLowerCase","includes","shuffleTodos","a","sort","Math","random","handleChange","event","target","name","value","prevProps","this","placeholder","onChange","selectItem","React","Component","API_URL","getBaseData","endpoint","fetch","data","ok","headers","get","json","getTodos","getUserById","user","CurrentUser","getUser","email","phone","App","selectedUserId","downloadTodos","changeSelectedUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.566bc44a.chunk.js","sourcesContent":["import React from 'react';\nimport { TodoItems } from '../TodoItems';\nimport './TodoList.scss';\n\ntype Props = {\n  todos: Todo[];\n  selectedUser: number;\n  onChangeUser: (id: number) => void;\n};\n\ntype State = {\n  visibleTodos: Todo[]\n  filterBy: FilterByStatus;\n  titleFilter: string;\n};\n\nenum FilterByStatus {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\ntype Event = React.ChangeEvent<HTMLInputElement> | React.ChangeEvent<HTMLSelectElement>;\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    visibleTodos: this.props.todos,\n    filterBy: FilterByStatus.All,\n    titleFilter: '',\n  };\n\n  filterOptions = [\n    FilterByStatus.All,\n    FilterByStatus.Active,\n    FilterByStatus.Completed,\n  ];\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.todos !== this.props.todos) {\n      this.loadTodos();\n    }\n  }\n\n  loadTodos = () => {\n    this.setState({\n      visibleTodos: this.props.todos,\n    });\n  };\n\n  getFilterTodos = () => {\n    const { filterBy, titleFilter } = this.state;\n    const { todos } = this.props;\n\n    switch (true) {\n      case (filterBy === FilterByStatus.All):\n        this.setState({\n          visibleTodos: todos.filter(todo => (\n            todo.title\n              .toLowerCase()\n              .includes(titleFilter.toLowerCase())\n          )),\n        });\n        break;\n      case (filterBy === FilterByStatus.Active):\n        this.setState({\n          visibleTodos: todos.filter(todo => (\n            !todo.completed\n            && todo.title\n              .toLowerCase()\n              .includes(titleFilter.toLowerCase())\n          )),\n        });\n        break;\n      case (filterBy === FilterByStatus.Completed):\n        this.setState({\n          visibleTodos: todos.filter(todo => (\n            todo.completed\n            && todo.title\n              .toLowerCase()\n              .includes(titleFilter.toLowerCase())\n          )),\n        });\n        break;\n      default:\n        break;\n    }\n  };\n\n  shuffleTodos = async () => {\n    this.setState(state => (\n      {\n        visibleTodos: state.visibleTodos.sort(() => Math.random() - 0.5),\n      }\n    ));\n  };\n\n  handleChange = async (event: Event) => {\n    const { name, value } = event.target;\n\n    if (name === 'filterBy') {\n      await this.setState({\n        filterBy: value as FilterByStatus,\n      });\n    } else {\n      await this.setState({\n        titleFilter: value,\n      });\n    }\n\n    this.getFilterTodos();\n  };\n\n  render() {\n    const { selectedUser, onChangeUser } = this.props;\n    const { visibleTodos, filterBy } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <input\n          placeholder=\"Search by title\"\n          name=\"titleFilter\"\n          type=\"text\"\n          onChange={this.handleChange}\n          className=\"TodoList__input\"\n        />\n\n        <select\n          name=\"filterBy\"\n          value={filterBy}\n          onChange={this.handleChange}\n          className=\"TodoList__select\"\n        >\n          {this.filterOptions.map(selectItem => (\n            <option\n              value={selectItem}\n              key={selectItem}\n            >\n              {selectItem}\n            </option>\n          ))}\n        </select>\n\n        <button\n          type=\"button\"\n          onClick={() => onChangeUser(0)}\n          className=\"TodoList__button button\"\n        >\n          Clear selected user\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={this.shuffleTodos}\n          className=\"TodoList__button button\"\n        >\n          Randomize\n        </button>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            <TodoItems\n              selectedUser={selectedUser}\n              onChangeUser={onChangeUser}\n              visibleTodos={visibleTodos}\n            />\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport classNames from 'classnames';\n\ntype Props = {\n  visibleTodos: Todo[];\n  selectedUser: number;\n  onChangeUser: (id: number) => void;\n};\n\nexport const TodoItems: React.FC<Props> = (props) => {\n  return (\n    <>\n      {props.visibleTodos.map(todo => (\n        <li\n          key={todo.id}\n          className={classNames(\n            {\n              TodoList__item: true,\n              'TodoList__item--unchecked': !todo.completed,\n              'TodoList__item--checked': todo.completed,\n            },\n          )}\n        >\n          <label>\n            <input\n              type=\"checkbox\"\n              readOnly\n              checked={todo.completed}\n            />\n            <p>{todo.title}</p>\n          </label>\n          <button\n            className={classNames(\n              {\n                button: true,\n                'TodoList__user-button': true,\n                'TodoList__user-button--selected': props.selectedUser === todo.userId,\n              },\n            )}\n            type=\"button\"\n            onClick={() => props.onChangeUser(todo.userId)}\n          >\n            {`User #${todo.userId}`}\n          </button>\n        </li>\n      ))}\n    </>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api/';\n\nasync function getBaseData(endpoint: string) {\n  const data = await fetch(`${API_URL}${endpoint}`);\n\n  if (data.ok && data.headers.get('content-type')?.includes('application/json')) {\n    return data.json();\n  }\n\n  return null;\n}\n\nexport async function getTodos(): Promise<Todo[]> {\n  const todos = await getBaseData('todos');\n\n  return todos;\n}\n\nexport async function getUserById(id: number): Promise<User> {\n  const user = await getBaseData(`users/${id}`);\n\n  return user;\n}\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUserById } from '../../api/index';\n\ntype Props = {\n  selectedUser: number;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUser !== this.props.selectedUser) {\n      this.getUser();\n    }\n  }\n\n  getUser = async () => {\n    const user = await getUserById(this.props.selectedUser);\n\n    this.setState({\n      user,\n    });\n  };\n\n  render() {\n    const { user } = this.state;\n\n    return user ? (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n      </div>\n    ) : (\n      <p>No users with this ID or you are offline</p>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\ntype State = {\n  selectedUserId: number;\n  todos: Todo[];\n};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n  };\n\n  componentDidMount() {\n    this.downloadTodos();\n  }\n\n  downloadTodos = async () => {\n    this.setState({\n      todos: await getTodos(),\n    });\n  };\n\n  changeSelectedUser = (id: number) => {\n    this.setState({\n      selectedUserId: id,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUser={selectedUserId}\n            onChangeUser={this.changeSelectedUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUser={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}